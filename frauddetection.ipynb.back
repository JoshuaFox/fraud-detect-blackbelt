{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: numpy in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from -r requirements.txt (line 1)) (1.18.1)\n",
      "Requirement already satisfied: pandas in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from -r requirements.txt (line 2)) (1.0.1)\n",
      "Requirement already satisfied: matplotlib in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from -r requirements.txt (line 3)) (3.1.3)\n",
      "Requirement already satisfied: jupyter in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from -r requirements.txt (line 4)) (1.0.0)\n",
      "Requirement already satisfied: boto3 in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from -r requirements.txt (line 5)) (1.16.6)\n",
      "Requirement already satisfied: sagemaker in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from -r requirements.txt (line 6)) (1.72.1)\n",
      "Requirement already satisfied: scikit-learn==0.23.1 in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from -r requirements.txt (line 7)) (0.23.1)\n",
      "Requirement already satisfied: imbalanced-learn in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from -r requirements.txt (line 8)) (0.7.0)\n",
      "Requirement already satisfied: category_encoders in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from -r requirements.txt (line 9)) (2.2.2)\n",
      "Requirement already satisfied: seaborn in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from -r requirements.txt (line 10)) (0.10.0)\n",
      "Requirement already satisfied: pytz>=2017.2 in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from pandas->-r requirements.txt (line 2)) (2019.3)\n",
      "Requirement already satisfied: python-dateutil>=2.6.1 in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from pandas->-r requirements.txt (line 2)) (2.8.1)\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from matplotlib->-r requirements.txt (line 3)) (1.1.0)\n",
      "Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from matplotlib->-r requirements.txt (line 3)) (2.4.6)\n",
      "Requirement already satisfied: cycler>=0.10 in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from matplotlib->-r requirements.txt (line 3)) (0.10.0)\n",
      "Requirement already satisfied: ipykernel in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from jupyter->-r requirements.txt (line 4)) (5.1.4)\n",
      "Requirement already satisfied: nbconvert in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from jupyter->-r requirements.txt (line 4)) (5.6.1)\n",
      "Requirement already satisfied: ipywidgets in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from jupyter->-r requirements.txt (line 4)) (7.5.1)\n",
      "Requirement already satisfied: jupyter-console in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from jupyter->-r requirements.txt (line 4)) (6.1.0)\n",
      "Requirement already satisfied: qtconsole in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from jupyter->-r requirements.txt (line 4)) (4.6.0)\n",
      "Requirement already satisfied: notebook in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from jupyter->-r requirements.txt (line 4)) (6.0.3)\n",
      "Requirement already satisfied: botocore<1.20.0,>=1.19.6 in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from boto3->-r requirements.txt (line 5)) (1.19.6)\n",
      "Requirement already satisfied: s3transfer<0.4.0,>=0.3.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from boto3->-r requirements.txt (line 5)) (0.3.3)\n",
      "Requirement already satisfied: jmespath<1.0.0,>=0.7.1 in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from boto3->-r requirements.txt (line 5)) (0.10.0)\n",
      "Requirement already satisfied: scipy>=0.19.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from sagemaker->-r requirements.txt (line 6)) (1.4.1)\n",
      "Requirement already satisfied: importlib-metadata>=1.4.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from sagemaker->-r requirements.txt (line 6)) (1.5.0)\n",
      "Requirement already satisfied: smdebug-rulesconfig==0.1.4 in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from sagemaker->-r requirements.txt (line 6)) (0.1.4)\n",
      "Requirement already satisfied: protobuf3-to-dict>=0.1.5 in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from sagemaker->-r requirements.txt (line 6)) (0.1.5)\n",
      "Requirement already satisfied: packaging>=20.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from sagemaker->-r requirements.txt (line 6)) (20.1)\n",
      "Requirement already satisfied: protobuf>=3.1 in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from sagemaker->-r requirements.txt (line 6)) (3.11.4)\n",
      "Requirement already satisfied: joblib>=0.11 in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from scikit-learn==0.23.1->-r requirements.txt (line 7)) (0.14.1)\n",
      "Requirement already satisfied: threadpoolctl>=2.0.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from scikit-learn==0.23.1->-r requirements.txt (line 7)) (2.1.0)\n",
      "Requirement already satisfied: statsmodels>=0.9.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from category_encoders->-r requirements.txt (line 9)) (0.11.0)\n",
      "Requirement already satisfied: patsy>=0.5.1 in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from category_encoders->-r requirements.txt (line 9)) (0.5.1)\n",
      "Requirement already satisfied: six>=1.5 in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from python-dateutil>=2.6.1->pandas->-r requirements.txt (line 2)) (1.14.0)\n",
      "Requirement already satisfied: setuptools in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from kiwisolver>=1.0.1->matplotlib->-r requirements.txt (line 3)) (45.2.0.post20200210)\n",
      "Requirement already satisfied: jupyter-client in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from ipykernel->jupyter->-r requirements.txt (line 4)) (5.3.4)\n",
      "Requirement already satisfied: ipython>=5.0.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from ipykernel->jupyter->-r requirements.txt (line 4)) (7.12.0)\n",
      "Requirement already satisfied: traitlets>=4.1.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from ipykernel->jupyter->-r requirements.txt (line 4)) (4.3.3)\n",
      "Requirement already satisfied: tornado>=4.2 in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from ipykernel->jupyter->-r requirements.txt (line 4)) (6.0.3)\n",
      "Requirement already satisfied: jinja2>=2.4 in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from nbconvert->jupyter->-r requirements.txt (line 4)) (2.11.1)\n",
      "Requirement already satisfied: pygments in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from nbconvert->jupyter->-r requirements.txt (line 4)) (2.5.2)\n",
      "Requirement already satisfied: jupyter-core in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from nbconvert->jupyter->-r requirements.txt (line 4)) (4.6.1)\n",
      "Requirement already satisfied: bleach in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from nbconvert->jupyter->-r requirements.txt (line 4)) (3.2.1)\n",
      "Requirement already satisfied: defusedxml in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from nbconvert->jupyter->-r requirements.txt (line 4)) (0.6.0)\n",
      "Requirement already satisfied: entrypoints>=0.2.2 in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from nbconvert->jupyter->-r requirements.txt (line 4)) (0.3)\n",
      "Requirement already satisfied: pandocfilters>=1.4.1 in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from nbconvert->jupyter->-r requirements.txt (line 4)) (1.4.2)\n",
      "Requirement already satisfied: mistune<2,>=0.8.1 in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from nbconvert->jupyter->-r requirements.txt (line 4)) (0.8.4)\n",
      "Requirement already satisfied: testpath in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from nbconvert->jupyter->-r requirements.txt (line 4)) (0.4.4)\n",
      "Requirement already satisfied: nbformat>=4.4 in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from nbconvert->jupyter->-r requirements.txt (line 4)) (5.0.4)\n",
      "Requirement already satisfied: widgetsnbextension~=3.5.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from ipywidgets->jupyter->-r requirements.txt (line 4)) (3.5.1)\n",
      "Requirement already satisfied: prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from jupyter-console->jupyter->-r requirements.txt (line 4)) (3.0.3)\n",
      "Requirement already satisfied: ipython-genutils in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from qtconsole->jupyter->-r requirements.txt (line 4)) (0.2.0)\n",
      "Requirement already satisfied: pyzmq>=17 in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from notebook->jupyter->-r requirements.txt (line 4)) (18.1.1)\n",
      "Requirement already satisfied: terminado>=0.8.1 in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from notebook->jupyter->-r requirements.txt (line 4)) (0.8.3)\n",
      "Requirement already satisfied: Send2Trash in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from notebook->jupyter->-r requirements.txt (line 4)) (1.5.0)\n",
      "Requirement already satisfied: prometheus-client in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from notebook->jupyter->-r requirements.txt (line 4)) (0.7.1)\n",
      "Requirement already satisfied: urllib3<1.26,>=1.25.4; python_version != \"3.4\" in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from botocore<1.20.0,>=1.19.6->boto3->-r requirements.txt (line 5)) (1.25.10)\n",
      "Requirement already satisfied: zipp>=0.5 in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from importlib-metadata>=1.4.0->sagemaker->-r requirements.txt (line 6)) (2.2.0)\n",
      "Requirement already satisfied: decorator in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from ipython>=5.0.0->ipykernel->jupyter->-r requirements.txt (line 4)) (4.4.1)\n",
      "Requirement already satisfied: pickleshare in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from ipython>=5.0.0->ipykernel->jupyter->-r requirements.txt (line 4)) (0.7.5)\n",
      "Requirement already satisfied: backcall in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from ipython>=5.0.0->ipykernel->jupyter->-r requirements.txt (line 4)) (0.1.0)\n",
      "Requirement already satisfied: jedi>=0.10 in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from ipython>=5.0.0->ipykernel->jupyter->-r requirements.txt (line 4)) (0.14.1)\n",
      "Requirement already satisfied: pexpect; sys_platform != \"win32\" in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from ipython>=5.0.0->ipykernel->jupyter->-r requirements.txt (line 4)) (4.8.0)\n",
      "Requirement already satisfied: MarkupSafe>=0.23 in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from jinja2>=2.4->nbconvert->jupyter->-r requirements.txt (line 4)) (1.1.1)\n",
      "Requirement already satisfied: webencodings in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from bleach->nbconvert->jupyter->-r requirements.txt (line 4)) (0.5.1)\n",
      "Requirement already satisfied: jsonschema!=2.5.0,>=2.4 in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from nbformat>=4.4->nbconvert->jupyter->-r requirements.txt (line 4)) (3.2.0)\n",
      "Requirement already satisfied: wcwidth in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0->jupyter-console->jupyter->-r requirements.txt (line 4)) (0.1.8)\n",
      "Requirement already satisfied: parso>=0.5.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from jedi>=0.10->ipython>=5.0.0->ipykernel->jupyter->-r requirements.txt (line 4)) (0.5.2)\n",
      "Requirement already satisfied: ptyprocess>=0.5 in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from pexpect; sys_platform != \"win32\"->ipython>=5.0.0->ipykernel->jupyter->-r requirements.txt (line 4)) (0.6.0)\n",
      "Requirement already satisfied: attrs>=17.4.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from jsonschema!=2.5.0,>=2.4->nbformat>=4.4->nbconvert->jupyter->-r requirements.txt (line 4)) (19.3.0)\n",
      "Requirement already satisfied: pyrsistent>=0.14.0 in /home/ec2-user/anaconda3/envs/python3/lib/python3.6/site-packages (from jsonschema!=2.5.0,>=2.4->nbformat>=4.4->nbconvert->jupyter->-r requirements.txt (line 4)) (0.15.7)\n",
      "\u001b[33mWARNING: You are using pip version 20.0.2; however, version 20.2.4 is available.\n",
      "You should consider upgrading via the '/home/ec2-user/anaconda3/envs/python3/bin/python -m pip install --upgrade pip' command.\u001b[0m\n",
      "CPU times: user 49.7 ms, sys: 17 ms, total: 66.7 ms\n",
      "Wall time: 2.22 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "import sys;\n",
    "!{sys.executable} -m pip install -r requirements.txt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "isConfigCell": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Bucket sagemaker-jfox in region eu-west-1\n",
      "CPU times: user 47.2 ms, sys: 0 ns, total: 47.2 ms\n",
      "Wall time: 73.7 ms\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "import boto3\n",
    "import sagemaker\n",
    "\n",
    "session = sagemaker.Session() \n",
    "region = session.boto_region_name \n",
    "\n",
    "bucket = 'sagemaker-jfox'\n",
    " \n",
    "prefix = 'sagemaker/xgboost'\n",
    "role = sagemaker.get_execution_role()\n",
    "\n",
    "print(f'Bucket {bucket} in region {region}')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Length 999999\n",
      "CPU times: user 1.63 s, sys: 130 ms, total: 1.76 s\n",
      "Wall time: 1.76 s\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>step</th>\n",
       "      <th>type</th>\n",
       "      <th>amount</th>\n",
       "      <th>nameOrig</th>\n",
       "      <th>oldbalanceOrg</th>\n",
       "      <th>newbalanceOrig</th>\n",
       "      <th>nameDest</th>\n",
       "      <th>oldbalanceDest</th>\n",
       "      <th>newbalanceDest</th>\n",
       "      <th>isFraud</th>\n",
       "      <th>isFlaggedFraud</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>PAYMENT</td>\n",
       "      <td>9839.64</td>\n",
       "      <td>C1231006815</td>\n",
       "      <td>170136.00</td>\n",
       "      <td>160296.36</td>\n",
       "      <td>M1979787155</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>PAYMENT</td>\n",
       "      <td>1864.28</td>\n",
       "      <td>C1666544295</td>\n",
       "      <td>21249.00</td>\n",
       "      <td>19384.72</td>\n",
       "      <td>M2044282225</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>TRANSFER</td>\n",
       "      <td>181.00</td>\n",
       "      <td>C1305486145</td>\n",
       "      <td>181.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>C553264065</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>CASH_OUT</td>\n",
       "      <td>181.00</td>\n",
       "      <td>C840083671</td>\n",
       "      <td>181.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>C38997010</td>\n",
       "      <td>21182.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>PAYMENT</td>\n",
       "      <td>11668.14</td>\n",
       "      <td>C2048537720</td>\n",
       "      <td>41554.00</td>\n",
       "      <td>29885.86</td>\n",
       "      <td>M1230701703</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999994</th>\n",
       "      <td>45</td>\n",
       "      <td>PAYMENT</td>\n",
       "      <td>2987.49</td>\n",
       "      <td>C2072426611</td>\n",
       "      <td>579096.28</td>\n",
       "      <td>576108.80</td>\n",
       "      <td>M58668896</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999995</th>\n",
       "      <td>45</td>\n",
       "      <td>PAYMENT</td>\n",
       "      <td>10913.42</td>\n",
       "      <td>C1384914558</td>\n",
       "      <td>576108.80</td>\n",
       "      <td>565195.38</td>\n",
       "      <td>M166797080</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999996</th>\n",
       "      <td>45</td>\n",
       "      <td>PAYMENT</td>\n",
       "      <td>2014.46</td>\n",
       "      <td>C1207593845</td>\n",
       "      <td>565195.38</td>\n",
       "      <td>563180.92</td>\n",
       "      <td>M1027899613</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999997</th>\n",
       "      <td>45</td>\n",
       "      <td>PAYMENT</td>\n",
       "      <td>18839.45</td>\n",
       "      <td>C260638437</td>\n",
       "      <td>563180.92</td>\n",
       "      <td>544341.47</td>\n",
       "      <td>M243388883</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999998</th>\n",
       "      <td>45</td>\n",
       "      <td>PAYMENT</td>\n",
       "      <td>17890.19</td>\n",
       "      <td>C439661237</td>\n",
       "      <td>544341.47</td>\n",
       "      <td>526451.29</td>\n",
       "      <td>M66034502</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>999999 rows × 11 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        step      type    amount     nameOrig  oldbalanceOrg  newbalanceOrig     nameDest  oldbalanceDest  newbalanceDest  isFraud  isFlaggedFraud\n",
       "0          1   PAYMENT   9839.64  C1231006815      170136.00       160296.36  M1979787155             0.0             0.0        0               0\n",
       "1          1   PAYMENT   1864.28  C1666544295       21249.00        19384.72  M2044282225             0.0             0.0        0               0\n",
       "2          1  TRANSFER    181.00  C1305486145         181.00            0.00   C553264065             0.0             0.0        1               0\n",
       "3          1  CASH_OUT    181.00   C840083671         181.00            0.00    C38997010         21182.0             0.0        1               0\n",
       "4          1   PAYMENT  11668.14  C2048537720       41554.00        29885.86  M1230701703             0.0             0.0        0               0\n",
       "...      ...       ...       ...          ...            ...             ...          ...             ...             ...      ...             ...\n",
       "999994    45   PAYMENT   2987.49  C2072426611      579096.28       576108.80    M58668896             0.0             0.0        0               0\n",
       "999995    45   PAYMENT  10913.42  C1384914558      576108.80       565195.38   M166797080             0.0             0.0        0               0\n",
       "999996    45   PAYMENT   2014.46  C1207593845      565195.38       563180.92  M1027899613             0.0             0.0        0               0\n",
       "999997    45   PAYMENT  18839.45   C260638437      563180.92       544341.47   M243388883             0.0             0.0        0               0\n",
       "999998    45   PAYMENT  17890.19   C439661237      544341.47       526451.29    M66034502             0.0             0.0        0               0\n",
       "\n",
       "[999999 rows x 11 columns]"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%time\n",
    "import random\n",
    "import pandas as pd\n",
    "raw_data_filename = 'short-fraud-detection.csv'\n",
    "\n",
    "s3 = boto3.resource('s3', region_name=region)\n",
    "#s3.Bucket(bucket).download_file(raw_data_filename, raw_data_filename)\n",
    "percent_to_read=100\n",
    "fraction_to_read=percent_to_read/100 # Divide by 1000 and not 100 as expected?\n",
    "df = pd.read_csv('./'+raw_data_filename,  skiprows=lambda i: i>0 and random.random() > fraction_to_read)\n",
    "pd.set_option('display.max_rows', 10) \n",
    "pd.set_option('display.width', 1000)\n",
    "\n",
    "print('Length', len(df))\n",
    "target_col='isFraud'\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "All `isFraud` rows have `type` `TRANSFER` or `CASH_OUT`, never but `CASH_IN` or `PAYMENT`. Could filter these out."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Counts of each class to determine imbalance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fraud 535 ; Not fraud 999464 ; Total 999999\n"
     ]
    }
   ],
   "source": [
    " \n",
    "def count_positive_and_negative(df):\n",
    "    num_positive = len(df.loc[  df[target_col] == 1 ])\n",
    "    num_negative = len(df) - num_positive\n",
    "    return num_positive, num_negative\n",
    "\n",
    "num_positive, num_negative = count_positive_and_negative(df)\n",
    "\n",
    "print('Fraud', num_positive, '; Not fraud', num_negative, '; Total', len(df))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Not using `isFlaggedFraud`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df.drop(['isFlaggedFraud'], axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Plot distribution of positive vs negative, in log scale because of the imbalance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import math\n",
    "import matplotlib.pyplot as plt   \n",
    "def plot_positive_negative_counts(df, target_col):\n",
    "    val_counts=df[target_col].value_counts()\n",
    "    fig, ax = plt.subplots()\n",
    "    ax.set(yscale=\"log\")\n",
    "    plt.bar(['Yes', 'No'], val_counts)\n",
    "    plt.ylabel('count')\n",
    "    plt.show()\n",
    "    \n",
    "plot_positive_negative_counts(df,target_col)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Scale the numerical values."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>step</th>\n",
       "      <th>type</th>\n",
       "      <th>amount</th>\n",
       "      <th>nameOrig</th>\n",
       "      <th>oldbalanceOrg</th>\n",
       "      <th>newbalanceOrig</th>\n",
       "      <th>nameDest</th>\n",
       "      <th>oldbalanceDest</th>\n",
       "      <th>newbalanceDest</th>\n",
       "      <th>isFraud</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>PAYMENT</td>\n",
       "      <td>-0.580156</td>\n",
       "      <td>C1231006815</td>\n",
       "      <td>-0.237235</td>\n",
       "      <td>-0.244442</td>\n",
       "      <td>M1979787155</td>\n",
       "      <td>-0.427717</td>\n",
       "      <td>-0.463887</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>PAYMENT</td>\n",
       "      <td>-0.610919</td>\n",
       "      <td>C1666544295</td>\n",
       "      <td>-0.287157</td>\n",
       "      <td>-0.291112</td>\n",
       "      <td>M2044282225</td>\n",
       "      <td>-0.427717</td>\n",
       "      <td>-0.463887</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>TRANSFER</td>\n",
       "      <td>-0.617411</td>\n",
       "      <td>C1305486145</td>\n",
       "      <td>-0.294221</td>\n",
       "      <td>-0.297532</td>\n",
       "      <td>C553264065</td>\n",
       "      <td>-0.427717</td>\n",
       "      <td>-0.463887</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>CASH_OUT</td>\n",
       "      <td>-0.617411</td>\n",
       "      <td>C840083671</td>\n",
       "      <td>-0.294221</td>\n",
       "      <td>-0.297532</td>\n",
       "      <td>C38997010</td>\n",
       "      <td>-0.418529</td>\n",
       "      <td>-0.463887</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>PAYMENT</td>\n",
       "      <td>-0.573104</td>\n",
       "      <td>C2048537720</td>\n",
       "      <td>-0.280348</td>\n",
       "      <td>-0.287634</td>\n",
       "      <td>M1230701703</td>\n",
       "      <td>-0.427717</td>\n",
       "      <td>-0.463887</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999994</th>\n",
       "      <td>45</td>\n",
       "      <td>PAYMENT</td>\n",
       "      <td>-0.606586</td>\n",
       "      <td>C2072426611</td>\n",
       "      <td>-0.100111</td>\n",
       "      <td>-0.106725</td>\n",
       "      <td>M58668896</td>\n",
       "      <td>-0.427717</td>\n",
       "      <td>-0.463887</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999995</th>\n",
       "      <td>45</td>\n",
       "      <td>PAYMENT</td>\n",
       "      <td>-0.576015</td>\n",
       "      <td>C1384914558</td>\n",
       "      <td>-0.101113</td>\n",
       "      <td>-0.110340</td>\n",
       "      <td>M166797080</td>\n",
       "      <td>-0.427717</td>\n",
       "      <td>-0.463887</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999996</th>\n",
       "      <td>45</td>\n",
       "      <td>PAYMENT</td>\n",
       "      <td>-0.610339</td>\n",
       "      <td>C1207593845</td>\n",
       "      <td>-0.104772</td>\n",
       "      <td>-0.111007</td>\n",
       "      <td>M1027899613</td>\n",
       "      <td>-0.427717</td>\n",
       "      <td>-0.463887</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999997</th>\n",
       "      <td>45</td>\n",
       "      <td>PAYMENT</td>\n",
       "      <td>-0.545443</td>\n",
       "      <td>C260638437</td>\n",
       "      <td>-0.105448</td>\n",
       "      <td>-0.117247</td>\n",
       "      <td>M243388883</td>\n",
       "      <td>-0.427717</td>\n",
       "      <td>-0.463887</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999998</th>\n",
       "      <td>45</td>\n",
       "      <td>PAYMENT</td>\n",
       "      <td>-0.549104</td>\n",
       "      <td>C439661237</td>\n",
       "      <td>-0.111765</td>\n",
       "      <td>-0.123172</td>\n",
       "      <td>M66034502</td>\n",
       "      <td>-0.427717</td>\n",
       "      <td>-0.463887</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>999999 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        step      type    amount     nameOrig  oldbalanceOrg  newbalanceOrig     nameDest  oldbalanceDest  newbalanceDest  isFraud\n",
       "0          1   PAYMENT -0.580156  C1231006815      -0.237235       -0.244442  M1979787155       -0.427717       -0.463887        0\n",
       "1          1   PAYMENT -0.610919  C1666544295      -0.287157       -0.291112  M2044282225       -0.427717       -0.463887        0\n",
       "2          1  TRANSFER -0.617411  C1305486145      -0.294221       -0.297532   C553264065       -0.427717       -0.463887        1\n",
       "3          1  CASH_OUT -0.617411   C840083671      -0.294221       -0.297532    C38997010       -0.418529       -0.463887        1\n",
       "4          1   PAYMENT -0.573104  C2048537720      -0.280348       -0.287634  M1230701703       -0.427717       -0.463887        0\n",
       "...      ...       ...       ...          ...            ...             ...          ...             ...             ...      ...\n",
       "999994    45   PAYMENT -0.606586  C2072426611      -0.100111       -0.106725    M58668896       -0.427717       -0.463887        0\n",
       "999995    45   PAYMENT -0.576015  C1384914558      -0.101113       -0.110340   M166797080       -0.427717       -0.463887        0\n",
       "999996    45   PAYMENT -0.610339  C1207593845      -0.104772       -0.111007  M1027899613       -0.427717       -0.463887        0\n",
       "999997    45   PAYMENT -0.545443   C260638437      -0.105448       -0.117247   M243388883       -0.427717       -0.463887        0\n",
       "999998    45   PAYMENT -0.549104   C439661237      -0.111765       -0.123172    M66034502       -0.427717       -0.463887        0\n",
       "\n",
       "[999999 rows x 10 columns]"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Split numerical from non-numerical\n",
    "columns = df.columns\n",
    "numerical_cols = ['amount', 'oldbalanceOrg', 'newbalanceOrig', 'oldbalanceDest', 'newbalanceDest']\n",
    "other_col =[c for c in columns if  c not in numerical_cols]\n",
    "df_other = df[other_col]\n",
    "\n",
    "df_num = df[numerical_cols]\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "scaler = StandardScaler()\n",
    "df_num = pd.DataFrame(scaler.fit_transform(df_num), columns=df_num.columns)\n",
    "df = pd.concat([df_num, df_other], axis=1)\n",
    "df = df[columns] # Put back in old order\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Make dummies (onehot) for `type` field."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "cols = df.columns.tolist()\n",
    "cols.remove(target_col)\n",
    "cols = [target_col] + cols\n",
    "df = df[cols] # Move target to the left\n",
    "\n",
    "df_dummies=pd.get_dummies(df['type'],drop_first=True )\n",
    "\n",
    "df=df.drop(['type'], axis=1)\n",
    "df = pd.concat([df, df_dummies], axis=1)\n",
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We could use *HashingEncoder* to handle categorical columns with high cardinality. These cannot be onehotted as that would generate too many columns and a too-sparse matrix. However, this seems to provide no accuracy benefit."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dropping high-cardinality categorical columns\n",
      "CPU times: user 126 ms, sys: 24.3 ms, total: 151 ms\n",
      "Wall time: 149 ms\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "high_cardinality__categorical_col = ['nameOrig', 'nameDest']\n",
    "use_hashing_encoder = False\n",
    "if not use_hashing_encoder:\n",
    "    print('Dropping high-cardinality categorical columns')\n",
    "    df=df.drop(high_cardinality__categorical_col, axis=1)\n",
    "else:\n",
    "  import category_encoders as ce  \n",
    "  columns_before = [x for x in df.columns if x not in high_cardinality__categorical_col+[target_col]]\n",
    "\n",
    "  def make_col_mapping(cols):\n",
    "    col_mapping = {}\n",
    "    for c in cols:\n",
    "        if c[:4]=='col_':\n",
    "          num = c.split('_')[-1]\n",
    "          int(num) # check format\n",
    "          col_mapping[c] = hashencode_this + \"_\" + num\n",
    "     \n",
    "    return col_mapping\n",
    "\n",
    "  \n",
    "  def hashencode(hashencode_this, df, previous_hash_cols):\n",
    "    \"\"\"Could hashencode both columns, but for now hashencode does not seem to provide a benefit.\"\"\"\n",
    "    for c in df.columns:\n",
    "        assert c[:4]!=\"col_\",  df.columns\n",
    "    cpus_in_t2xlarge = 4\n",
    "    default_max_sample = len(df)/cpus_in_t2xlarge\n",
    "    max_sample = default_max_sample/2\n",
    "    ce_hash = ce.HashingEncoder(cols = [hashencode_this],max_sample=max_sample)\n",
    "    X1 = df.drop([target_col], axis=1)\n",
    "    y1 = df[target_col]\n",
    "    with_hashing = ce_hash.fit_transform(X1, y1)\n",
    "    hashed = with_hashing.drop(columns_before+previous_hash_cols, axis=1)\n",
    "    generated_cols = [x for x in hashed.columns if x[:4]=='col_']\n",
    "    col_mapping = make_col_mapping(generated_cols)\n",
    "    \n",
    "    hashed = hashed.rename(columns = col_mapping)\n",
    "    df = pd.concat([y1, X1, hashed], axis=1)\n",
    " \n",
    "    df = df.drop([hashencode_this], axis=1)\n",
    "    return df, list(col_mapping.values())\n",
    " \n",
    "  previous_hash_cols = []\n",
    "  for hashencode_this in high_cardinality__categorical_col: \n",
    "   df, previous_hash_cols = hashencode(hashencode_this,df,previous_hash_cols)\n",
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Optionally use *SMOTENC* for unbalanced classes, though we may stick with the XGBoost parameters."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "from imblearn.over_sampling import SMOTENC\n",
    "# Using weighting in XGBOOST instead of SMOTENC\n",
    "use_smote = True\n",
    "if use_smote:\n",
    "   ycol=target_col\n",
    "   Xcol=list(df.columns)\n",
    "   Xcol.remove(ycol)\n",
    " \n",
    "   categorical_columns=[i for i in range(len(Xcol)) \n",
    "                     if Xcol[i] not in ['step','amount','oldbalanceOrg','newbalanceOrig','oldbalanceDest','newbalanceDest']]\n",
    "\n",
    "   smotenc = SMOTENC(categorical_columns,random_state = 101)\n",
    "\n",
    "   X, y = smotenc.fit_resample(df[Xcol], df[ycol])\n",
    "   y_df = pd.DataFrame({target_col: y} )\n",
    "\n",
    "   df = pd.concat([X, y_df], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_positive_negative_counts(df,target_col)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Split  with randomization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "len_=len(df)\n",
    "train_data, validation_data, test_data = np.split(df.sample(frac=1, random_state=1729), [int(0.7 * len_), int(0.9 * len_)])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Using libSVM for performance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Length of datasets: [('train', 1399249), ('validation', 399786), ('test', 199893)]\n",
      "CPU times: user 1min 24s, sys: 858 ms, total: 1min 25s\n",
      "Wall time: 1min 25s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "from sklearn.datasets import dump_svmlight_file   \n",
    "\n",
    "lengths = [] \n",
    "\n",
    "for d in [(train_data, 'train.libsvm'), ( validation_data, 'validation.libsvm'), (test_data, 'test.libsvm')]:\n",
    "   dataset=d[0]\n",
    "   file_ = d[1]\n",
    "   lengths.append((d[1].split('.')[0],len(dataset)))\n",
    "   dump_svmlight_file(X=dataset.drop([target_col], axis=1), y=dataset[target_col], f=d[1])\n",
    "\n",
    "print('Length of datasets:', lengths )\n",
    "\n",
    "s3 = boto3.resource('s3', region_name=region)#TODO Remove\n",
    "\n",
    "for filename in ['train.libsvm', 'validation.libsvm']:\n",
    "   s3.Bucket(bucket).Object(prefix + '/'+filename.split('.')[0]+'/'+filename).upload_file(filename)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'s3_input' class will be renamed to 'TrainingInput' in SageMaker Python SDK v2.\n",
      "'s3_input' class will be renamed to 'TrainingInput' in SageMaker Python SDK v2.\n"
     ]
    }
   ],
   "source": [
    "def s3_path(subset):\n",
    "  return sagemaker.s3_input(s3_data='s3://{}/{}/{}'.format(bucket, prefix,subset), content_type='libsvm')\n",
    "\n",
    "s3_input_train = s3_path('train')\n",
    "s3_input_validation =s3_path('validation')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "## Train\n",
    "\n",
    "Our data is now ready to be used to train a XGBoost model. The XGBoost algorithm has many tunable hyperparameters. Some of these hyperparameters are listed below; initially we'll only use a few of them.  \n",
    "\n",
    "- `max_depth`: Maximum depth of a tree. As a cautionary note, a value too small could underfit the data, while increasing it will make the model more complex and thus more likely to overfit the data (in other words, the classic bias-variance tradeoff).\n",
    "- `eta`: Step size shrinkage used in updates to prevent overfitting.  \n",
    "- `eval_metric`: Evaluation metric(s) for validation data. For data sets such as this one with imbalanced classes, we'll use the AUC metric.\n",
    "- `scale_pos_weight`: Controls the balance of positive and negative weights, again useful for data sets having imbalanced classes.\n",
    "\n",
    "First we'll set up the parameters for an Amazon SageMaker Estimator object, and the hyperparameters for the algorithm itself.  The Estimator object from the Amazon SageMaker Python SDK is a convenient way to set up training jobs with a minimal amount of code."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "'get_image_uri' method will be deprecated in favor of 'ImageURIProvider' class in SageMaker Python SDK v2.\n",
      "Parameter image_name will be renamed to image_uri in SageMaker Python SDK v2.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "num_positive: 699760, num_negative: 699489\n",
      "scale_pos_weight 1.0\n"
     ]
    }
   ],
   "source": [
    "from sagemaker.amazon.amazon_estimator import get_image_uri\n",
    "\n",
    "container = get_image_uri(region, 'xgboost','1.0-1')\n",
    "\n",
    "xgb = sagemaker.estimator.Estimator(container,\n",
    "                                    role, \n",
    "                                    base_job_name='fraud-detection-job',\n",
    "                                    train_instance_count=1, \n",
    "                                    train_instance_type='ml.c5.xlarge',\n",
    "                                    output_path='s3://{}/{}/output'.format(bucket, prefix),\n",
    "                                    sagemaker_session=session)\n",
    "\n",
    "num_positive, num_negative=count_positive_and_negative(train_data)\n",
    "scale_pos_weight=num_negative / num_positive  \n",
    "\n",
    "print(f'num_positive: {num_positive}, num_negative: {num_negative}', scale_pos_weight', f'{scale_pos_weight:.1f}')\n",
    "\n",
    "xgb.set_hyperparameters(max_depth=3,\n",
    "                        eta=0.1,\n",
    "                        subsample=0.5,\n",
    "                        eval_metric='auc',\n",
    "                        objective='binary:logistic',\n",
    "                        scale_pos_weight=scale_pos_weight,\n",
    "                        num_round=100)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Run the hosted training (`fit`) job."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2020-11-12 10:16:37 Starting - Starting the training job...\n",
      "2020-11-12 10:16:39 Starting - Launching requested ML instances......\n",
      "2020-11-12 10:18:03 Starting - Preparing the instances for training......\n",
      "2020-11-12 10:19:05 Downloading - Downloading input data\n",
      "2020-11-12 10:19:05 Training - Downloading the training image...\n",
      "2020-11-12 10:19:18 Training - Training image download completed. Training in progress.\u001b[34mINFO:sagemaker-containers:Imported framework sagemaker_xgboost_container.training\u001b[0m\n",
      "\u001b[34mINFO:sagemaker-containers:Failed to parse hyperparameter eval_metric value auc to Json.\u001b[0m\n",
      "\u001b[34mReturning the value itself\u001b[0m\n",
      "\u001b[34mINFO:sagemaker-containers:Failed to parse hyperparameter objective value binary:logistic to Json.\u001b[0m\n",
      "\u001b[34mReturning the value itself\u001b[0m\n",
      "\u001b[34mINFO:sagemaker-containers:No GPUs detected (normal if no gpus installed)\u001b[0m\n",
      "\u001b[34mINFO:sagemaker_xgboost_container.training:Running XGBoost Sagemaker in algorithm mode\u001b[0m\n",
      "\u001b[34m[10:19:21] 1399249x10 matrix with 9641495 entries loaded from /opt/ml/input/data/train\u001b[0m\n",
      "\u001b[34m[10:19:21] 399786x10 matrix with 2754890 entries loaded from /opt/ml/input/data/validation\u001b[0m\n",
      "\u001b[34mINFO:root:Single node training.\u001b[0m\n",
      "\u001b[34mINFO:root:Train matrix has 1399249 rows\u001b[0m\n",
      "\u001b[34mINFO:root:Validation matrix has 399786 rows\u001b[0m\n",
      "\u001b[34m[0]#011train-auc:0.95152#011validation-auc:0.95130\u001b[0m\n",
      "\u001b[34m[1]#011train-auc:0.95445#011validation-auc:0.95427\u001b[0m\n",
      "\u001b[34m[2]#011train-auc:0.95819#011validation-auc:0.95802\u001b[0m\n",
      "\u001b[34m[3]#011train-auc:0.95902#011validation-auc:0.95886\u001b[0m\n",
      "\u001b[34m[4]#011train-auc:0.96124#011validation-auc:0.96108\u001b[0m\n",
      "\u001b[34m[5]#011train-auc:0.97110#011validation-auc:0.97092\u001b[0m\n",
      "\u001b[34m[6]#011train-auc:0.97090#011validation-auc:0.97072\u001b[0m\n",
      "\u001b[34m[7]#011train-auc:0.97440#011validation-auc:0.97421\u001b[0m\n",
      "\u001b[34m[8]#011train-auc:0.97434#011validation-auc:0.97415\u001b[0m\n",
      "\u001b[34m[9]#011train-auc:0.97497#011validation-auc:0.97478\u001b[0m\n",
      "\u001b[34m[10]#011train-auc:0.97587#011validation-auc:0.97566\u001b[0m\n",
      "\u001b[34m[11]#011train-auc:0.97653#011validation-auc:0.97633\u001b[0m\n",
      "\u001b[34m[12]#011train-auc:0.97653#011validation-auc:0.97634\u001b[0m\n",
      "\u001b[34m[13]#011train-auc:0.98016#011validation-auc:0.97999\u001b[0m\n",
      "\u001b[34m[14]#011train-auc:0.98171#011validation-auc:0.98150\u001b[0m\n",
      "\u001b[34m[15]#011train-auc:0.98232#011validation-auc:0.98218\u001b[0m\n",
      "\u001b[34m[16]#011train-auc:0.98222#011validation-auc:0.98209\u001b[0m\n",
      "\u001b[34m[17]#011train-auc:0.98376#011validation-auc:0.98362\u001b[0m\n",
      "\u001b[34m[18]#011train-auc:0.98573#011validation-auc:0.98558\u001b[0m\n",
      "\u001b[34m[19]#011train-auc:0.98609#011validation-auc:0.98593\u001b[0m\n",
      "\u001b[34m[20]#011train-auc:0.98637#011validation-auc:0.98620\u001b[0m\n",
      "\u001b[34m[21]#011train-auc:0.98641#011validation-auc:0.98625\u001b[0m\n",
      "\u001b[34m[22]#011train-auc:0.98705#011validation-auc:0.98689\u001b[0m\n",
      "\u001b[34m[23]#011train-auc:0.98777#011validation-auc:0.98758\u001b[0m\n",
      "\u001b[34m[24]#011train-auc:0.98874#011validation-auc:0.98856\u001b[0m\n",
      "\u001b[34m[25]#011train-auc:0.98939#011validation-auc:0.98921\u001b[0m\n",
      "\u001b[34m[26]#011train-auc:0.98949#011validation-auc:0.98930\u001b[0m\n",
      "\u001b[34m[27]#011train-auc:0.98967#011validation-auc:0.98949\u001b[0m\n",
      "\u001b[34m[28]#011train-auc:0.99000#011validation-auc:0.98982\u001b[0m\n",
      "\u001b[34m[29]#011train-auc:0.99027#011validation-auc:0.99006\u001b[0m\n",
      "\u001b[34m[30]#011train-auc:0.99026#011validation-auc:0.99005\u001b[0m\n",
      "\u001b[34m[31]#011train-auc:0.99053#011validation-auc:0.99034\u001b[0m\n",
      "\u001b[34m[32]#011train-auc:0.99091#011validation-auc:0.99072\u001b[0m\n",
      "\u001b[34m[33]#011train-auc:0.99115#011validation-auc:0.99096\u001b[0m\n",
      "\u001b[34m[34]#011train-auc:0.99138#011validation-auc:0.99120\u001b[0m\n",
      "\u001b[34m[35]#011train-auc:0.99130#011validation-auc:0.99111\u001b[0m\n",
      "\u001b[34m[36]#011train-auc:0.99137#011validation-auc:0.99115\u001b[0m\n",
      "\u001b[34m[37]#011train-auc:0.99240#011validation-auc:0.99230\u001b[0m\n",
      "\u001b[34m[38]#011train-auc:0.99248#011validation-auc:0.99238\u001b[0m\n",
      "\u001b[34m[39]#011train-auc:0.99249#011validation-auc:0.99239\u001b[0m\n",
      "\u001b[34m[40]#011train-auc:0.99263#011validation-auc:0.99253\u001b[0m\n",
      "\u001b[34m[41]#011train-auc:0.99264#011validation-auc:0.99255\u001b[0m\n",
      "\u001b[34m[42]#011train-auc:0.99268#011validation-auc:0.99259\u001b[0m\n",
      "\u001b[34m[43]#011train-auc:0.99281#011validation-auc:0.99272\u001b[0m\n",
      "\u001b[34m[44]#011train-auc:0.99289#011validation-auc:0.99279\u001b[0m\n",
      "\u001b[34m[45]#011train-auc:0.99310#011validation-auc:0.99301\u001b[0m\n",
      "\u001b[34m[46]#011train-auc:0.99324#011validation-auc:0.99316\u001b[0m\n",
      "\u001b[34m[47]#011train-auc:0.99338#011validation-auc:0.99330\u001b[0m\n",
      "\u001b[34m[48]#011train-auc:0.99342#011validation-auc:0.99333\u001b[0m\n",
      "\u001b[34m[49]#011train-auc:0.99350#011validation-auc:0.99342\u001b[0m\n",
      "\u001b[34m[50]#011train-auc:0.99353#011validation-auc:0.99345\u001b[0m\n",
      "\u001b[34m[51]#011train-auc:0.99364#011validation-auc:0.99357\u001b[0m\n",
      "\u001b[34m[52]#011train-auc:0.99370#011validation-auc:0.99363\u001b[0m\n",
      "\u001b[34m[53]#011train-auc:0.99374#011validation-auc:0.99366\u001b[0m\n",
      "\u001b[34m[54]#011train-auc:0.99389#011validation-auc:0.99381\u001b[0m\n",
      "\u001b[34m[55]#011train-auc:0.99393#011validation-auc:0.99386\u001b[0m\n",
      "\u001b[34m[56]#011train-auc:0.99399#011validation-auc:0.99392\u001b[0m\n",
      "\u001b[34m[57]#011train-auc:0.99407#011validation-auc:0.99399\u001b[0m\n",
      "\u001b[34m[58]#011train-auc:0.99417#011validation-auc:0.99409\u001b[0m\n",
      "\u001b[34m[59]#011train-auc:0.99423#011validation-auc:0.99415\u001b[0m\n",
      "\u001b[34m[60]#011train-auc:0.99428#011validation-auc:0.99420\u001b[0m\n",
      "\u001b[34m[61]#011train-auc:0.99432#011validation-auc:0.99424\u001b[0m\n",
      "\u001b[34m[62]#011train-auc:0.99436#011validation-auc:0.99428\u001b[0m\n",
      "\u001b[34m[63]#011train-auc:0.99440#011validation-auc:0.99431\u001b[0m\n",
      "\u001b[34m[64]#011train-auc:0.99453#011validation-auc:0.99445\u001b[0m\n",
      "\u001b[34m[65]#011train-auc:0.99455#011validation-auc:0.99447\u001b[0m\n",
      "\u001b[34m[66]#011train-auc:0.99460#011validation-auc:0.99452\u001b[0m\n",
      "\u001b[34m[67]#011train-auc:0.99468#011validation-auc:0.99460\u001b[0m\n",
      "\u001b[34m[68]#011train-auc:0.99478#011validation-auc:0.99470\u001b[0m\n",
      "\u001b[34m[69]#011train-auc:0.99479#011validation-auc:0.99471\u001b[0m\n",
      "\u001b[34m[70]#011train-auc:0.99483#011validation-auc:0.99475\u001b[0m\n",
      "\u001b[34m[71]#011train-auc:0.99489#011validation-auc:0.99481\u001b[0m\n",
      "\u001b[34m[72]#011train-auc:0.99494#011validation-auc:0.99486\u001b[0m\n",
      "\u001b[34m[73]#011train-auc:0.99492#011validation-auc:0.99484\u001b[0m\n",
      "\u001b[34m[74]#011train-auc:0.99494#011validation-auc:0.99486\u001b[0m\n",
      "\u001b[34m[75]#011train-auc:0.99503#011validation-auc:0.99495\u001b[0m\n",
      "\u001b[34m[76]#011train-auc:0.99507#011validation-auc:0.99499\u001b[0m\n",
      "\u001b[34m[77]#011train-auc:0.99511#011validation-auc:0.99503\u001b[0m\n",
      "\u001b[34m[78]#011train-auc:0.99516#011validation-auc:0.99507\u001b[0m\n",
      "\u001b[34m[79]#011train-auc:0.99518#011validation-auc:0.99510\u001b[0m\n",
      "\u001b[34m[80]#011train-auc:0.99521#011validation-auc:0.99513\u001b[0m\n",
      "\u001b[34m[81]#011train-auc:0.99524#011validation-auc:0.99516\u001b[0m\n",
      "\u001b[34m[82]#011train-auc:0.99525#011validation-auc:0.99517\u001b[0m\n",
      "\u001b[34m[83]#011train-auc:0.99531#011validation-auc:0.99523\u001b[0m\n",
      "\u001b[34m[84]#011train-auc:0.99537#011validation-auc:0.99529\u001b[0m\n",
      "\u001b[34m[85]#011train-auc:0.99543#011validation-auc:0.99535\u001b[0m\n",
      "\u001b[34m[86]#011train-auc:0.99551#011validation-auc:0.99543\u001b[0m\n",
      "\u001b[34m[87]#011train-auc:0.99556#011validation-auc:0.99548\u001b[0m\n",
      "\u001b[34m[88]#011train-auc:0.99558#011validation-auc:0.99550\u001b[0m\n",
      "\u001b[34m[89]#011train-auc:0.99562#011validation-auc:0.99554\u001b[0m\n",
      "\u001b[34m[90]#011train-auc:0.99563#011validation-auc:0.99555\u001b[0m\n",
      "\u001b[34m[91]#011train-auc:0.99569#011validation-auc:0.99560\u001b[0m\n",
      "\u001b[34m[92]#011train-auc:0.99570#011validation-auc:0.99562\u001b[0m\n",
      "\u001b[34m[93]#011train-auc:0.99573#011validation-auc:0.99564\u001b[0m\n",
      "\u001b[34m[94]#011train-auc:0.99574#011validation-auc:0.99566\u001b[0m\n",
      "\u001b[34m[95]#011train-auc:0.99577#011validation-auc:0.99569\u001b[0m\n",
      "\u001b[34m[96]#011train-auc:0.99578#011validation-auc:0.99570\u001b[0m\n",
      "\u001b[34m[97]#011train-auc:0.99580#011validation-auc:0.99572\u001b[0m\n",
      "\u001b[34m[98]#011train-auc:0.99584#011validation-auc:0.99576\u001b[0m\n",
      "\u001b[34m[99]#011train-auc:0.99586#011validation-auc:0.99577\u001b[0m\n",
      "\n",
      "2020-11-12 10:20:28 Uploading - Uploading generated training model\n",
      "2020-11-12 10:20:28 Completed - Training job completed\n",
      "Training seconds: 102\n",
      "Billable seconds: 102\n",
      "CPU times: user 529 ms, sys: 21.3 ms, total: 550 ms\n",
      "Wall time: 4min 14s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "xgb.fit({'train': s3_input_train, 'validation': s3_input_validation})"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "## Host\n",
    "\n",
    "Now that we've trained the XGBoost algorithm on our data, we can deploy the trained model to an Amazon SageMaker hosted endpoint with one simple line of code."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Parameter image will be renamed to image_uri in SageMaker Python SDK v2.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "model_name fraud-2020-11-12T10-54-11Z\n",
      "deploy_on_existing_endpoint\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Parameter image will be renamed to image_uri in SageMaker Python SDK v2.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'botocore.exceptions.ClientError'> An error occurred (ValidationException) when calling the UpdateEndpoint operation: Could not find endpoint \"arn:aws:sagemaker:eu-west-1:649592902942:endpoint/fraud-detection-endpoint\".\n",
      "deploy_on_new_endpoint\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using already existing model: fraud-2020-11-12T10-54-11Z\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "---------------!"
     ]
    }
   ],
   "source": [
    "import datetime \n",
    "model = xgb.create_model()\n",
    "container_def = model.prepare_container_def(instance_type='ml.m4.xlarge')\n",
    "model_name = 'fraud-' + datetime.datetime.now().isoformat().replace('.','-').replace(':','-')[:-7] +'Z' \n",
    "print('model_name', model_name)\n",
    " \n",
    "endpoint_name = 'fraud-detection-endpoint'\n",
    "\n",
    "def deploy_on_new_endpoint():\n",
    "      print('deploy_on_new_endpoint')\n",
    "      xgb_predictor = xgb.deploy(endpoint_name=endpoint_name, model_name=model_name,\n",
    "                                 initial_instance_count=1, instance_type='ml.m5.xlarge', accelerator_type='ml.eia2.medium')\n",
    "\n",
    "def deploy_on_existing_endpoint():\n",
    "        print('deploy_on_existing_endpoint')\n",
    "        session.create_model(model_name, role, container_def)\n",
    "\n",
    "        endpoint_config_name = session.create_endpoint_config(name=endpoint_name+'-config',\n",
    "                                                      model_name=model_name,\n",
    "                                                      initial_instance_count=1,\n",
    "                                                      instance_type='ml.m5.xlarge',\n",
    "                                                      accelerator_type='ml.eia2.medium')\n",
    "\n",
    "        client = boto3.client('sagemaker')\n",
    "        updated_endpoint=client.update_endpoint(EndpointName=endpoint_name, EndpointConfigName=endpoint_config_name)\n",
    "        print(updated_endpoint)\n",
    "        xgb_predictor = sagemaker.predictor.RealTimePredictor(endpoint=endpoint_name, sagemaker_session=sagemaker.Session())\n",
    "        \n",
    " \n",
    "try:\n",
    "    deploy_on_existing_endpoint()\n",
    "except Exception as e:\n",
    "      print(e)\n",
    " \n",
    "      if 'Could not find endpoint' in str(e):\n",
    "         deploy_on_new_endpoint()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "## Evaluation\n",
    "\n",
    "Now that we have our hosted endpoint, we can generate predictions from  the  test data set.\n",
    "\n",
    "Compared actual to predicted values of whether the transaction was a \"fraud\" (`1`) or not (`0`).  Then we'll produce a  confusion matrix."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [],
   "source": [
    "xgb_predictor.content_type = 'text/x-libsvm'\n",
    "xgb_predictor.deserializer = None\n",
    "\n",
    "def do_predict(data):\n",
    "    payload = '\\n'.join(data)\n",
    "    response = xgb_predictor.predict(payload).decode('utf-8')\n",
    "    result = response.split(',')\n",
    "    preds = [float((num)) for num in result]\n",
    "    preds = [round(num) for num in preds]\n",
    "    return preds\n",
    "\n",
    "def batch_predict(data, batch_size):\n",
    "    items = len(data)\n",
    "    arrs = []\n",
    "    \n",
    "    for offset in range(0, items, batch_size):\n",
    "        if offset+batch_size < items:\n",
    "            results = do_predict(data[offset:(offset+batch_size)])\n",
    "            arrs.extend(results)\n",
    "        else:\n",
    "            arrs.extend(do_predict(data[offset:items]))\n",
    "        sys.stdout.write('.')\n",
    "    return(arrs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
times: user 5.8 s, sys: 183 ms, total: 5.98 s\n",
      "Wall time: 17.6 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "import json\n",
    "\n",
    "with open('test.libsvm', 'r') as f:\n",
    "    payload = f.read().strip()\n",
    "\n",
    "labels = [int(line.split(' ')[0]) for line in payload.split('\\n')]\n",
    "test_data = [line for line in payload.split('\\n')]\n",
    "preds = batch_predict(test_data, 100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Recall=0.97\n",
      "Precision=0.96\n",
      "Error rate=0.03\n",
      "F1=0.97\n"
     ]
    }
   ],
   "source": [
    "\n",
    "actual_pos = sum(1 for i in range(len(labels)) if 1==labels[i])\n",
    "actual_neg = sum(1 for i in range(len(labels)) if 0==labels[i])\n",
    "\n",
    "pred_pos = sum(1 for i in range(len(preds)) if 1==preds[i])\n",
    "pred_neg = sum(1 for i in range(len(preds)) if 0==preds[i])\n",
    "\n",
    "true_pos = sum(1 for i in range(len(preds)) if preds[i]==1==labels[i])\n",
    "true_neg = sum(1 for i in range(len(preds)) if preds[i]==0==labels[i])\n",
    "\n",
    "false_pos=sum(1 for i in range(len(preds)) if preds[i]==1 and 0==labels[i])\n",
    "false_neg=sum(1 for i in range(len(preds)) if preds[i]==0 and 1==labels[i])\n",
    "\n",
    "recall = true_pos/(true_pos+false_neg)\n",
    "precision = true_pos/(true_pos+false_pos)\n",
    "f1 = (2 * precision * recall) / (precision + recall)\n",
    "error = sum(1 for i in range(len(preds)) if preds[i]!=labels[i]) /float(len(preds))\n",
    "assert recall <= f1 <= precision or precision <= f1 <= recall \n",
    "assert true_pos + false_neg == actual_pos\n",
    "assert true_neg + false_pos == actual_neg\n",
    "#print('pred_pos', pred_pos,'pred_neg', pred_neg)\n",
    "\n",
    "assert len(preds)==len(labels)\n",
    "\n",
    "#print(len(preds), 'predictions and labels')\n",
    "\n",
    "#print('actual_pos', actual_pos, 'actual_neg', actual_neg)\n",
    "assert actual_pos+actual_neg==len(labels)\n",
    "                   \n",
    "#print('true_pos', true_pos, 'false_pos', false_pos)\n",
    "#assert  true_pos+false_pos == pred_pos\n",
    "\n",
    "#print('true_neg', true_neg, 'false_neg', false_neg )\n",
    "assert true_neg+false_neg== pred_neg\n",
    "\n",
    "#print('pred_pos+pred_neg',pred_pos+pred_neg)\n",
    "assert pred_pos+pred_neg==len(preds)\n",
    "\n",
    "print(f'Recall={recall:.2f}')\n",
    "print(f'Precision={precision:.2f}')\n",
    "print(f'Error rate={error:.2f}')\n",
    "print(f'F1={f1:.2f}')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Show confusion matrix."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>col_0</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>row_0</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>95805</td>\n",
       "      <td>4241</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2667</td>\n",
       "      <td>97180</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "col_0      0      1\n",
       "row_0              \n",
       "0      95805   4241\n",
       "1       2667  97180"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.crosstab(index=np.array(labels), columns=np.array(preds))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Clean up to save money"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [],
   "source": [
    "#session.delete_endpoint(xgb_predictor.endpoint)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "conda_python3",
   "language": "python",
   "name": "conda_python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.10"
  },
  "notice": "Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.  Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with the License. A copy of the License is located at http://aws.amazon.com/apache2.0/ or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
